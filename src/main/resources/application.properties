#-----------------------------------------------------------------------------------#
#region [Profile]
#spring.profiles.active=dev

#The below profile value will be injected from command line gradle build. See the 'README_HowToBuildAndRun.txt'.
#spring.profiles.active = &activeProfileInjectedDuringWarBuild&
#endregion [Profile]
#-----------------------------------------------------------------------------------#

#server.port = 8083
server.servlet.context-path = /scheduler
spring.main.allow-bean-definition-overriding=true

#custom_properties.location = ./config/props/

# for IDE use
custom_properties.location = ../../../../config/props/
#custom_properties.location = ../../config/props/

# ---------------------------------------- #

#toDayString = 1/1/2019


#region [Security]
#keep these values updated according to producer server's set values
#producer_server_api_user_name = company
#producer_server_api_user_password = eyetea
#producer_server_api_user_password = i1+ysQ8MQR7wx95a/hKtaA==
#endregion [Security]

#region [Actuator]
#management.endpoint.shutdown.enabled=true
endpoint.shutdown.enabled=true
#endpoint.shutdown.enabled=true
#security.enabled=false

management.endpoints.web.exposure.include=*
# if you'd like to expose shutdown:
management.endpoint.shutdown.enabled=true
#No auth  protected
#endpoints.shutdown.sensitive=false

springdoc.show.actuator=true
#endregion [Actuator]
#====================================================================#
#====================================================================#



#====================================================================#
#====================================================================#
#region [LOG]
#This works with spring boot's default logger (ie: the logback, not log4j2). Nonetheless, currently it is commented out
#logging.level.root = TRACE

#The below line is not mandatory. Just keeping to see which file is being used.
logging.config=classpath:log4j2.yml
logging.level.com.netflix=FATAL

#endregion [LOG]
#====================================================================#
#====================================================================#




#====================================================================#
#====================================================================#
#region [LOG OUTPUT in MongoDB]

#Without mentioning the below 3 properties, log4j2 is being able to send log to mongodb successfully
#spring.data.mongodb.host=localhost
#spring.data.mongodb.port=27017
#spring.data.mongodb.database=smart_bill_mongodb

#endregion [LOG OUTPUT in MongoDB]
#====================================================================#
#====================================================================#



#====================================================================#
#====================================================================#
#region [Custom Error Page]
#custom error page when No URL mapping is found

#Setting the below as 'false' makes to show the container's error page.
#Meaning, 'false' attribute disables the spring boot's default white label error page
#server.error.whitelabel.enabled = false

#server.error.include-stacktrace = always
#server.error.include-exception = true

#endregion [Custom Error Page]
#====================================================================#
#====================================================================#



#====================================================================#
#====================================================================#
#region [Eureka Client]

#Check: bootstrap.yml file

#need to test
#eureka.instance.preferIpAddress = true
#leaseRenewalIntervalInSeconds: 1
#leaseExpirationDurationInSeconds: 2
#client:
#serviceUrl:
#defaultZone: http://127.0.0.1:8761/eureka/
#healthcheck:
#enabled: true
#lease:
#duration: 5

#endregion [Eureka Client]
#====================================================================#
#====================================================================#






#====================================================================#
#====================================================================#
#region [Email]
#testing spring boot's email sending feature with 'scheduler' module
#https://mkyong.com/spring-boot/spring-boot-how-to-send-email-via-smtp/

#NEED to see whether the bean was using these or java code config
#spring.mail.host=smtp.gmail.com
#spring.mail.host=smtp.company.com
#spring.mail.port=587
#spring.mail.username=catkingerit
#spring.mail.password=lklk=-09

# Other properties
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.connectiontimeout=5000
#spring.mail.properties.mail.smtp.timeout=5000
#spring.mail.properties.mail.smtp.writetimeout=5000

# TLS , port 587
#spring.mail.properties.mail.smtp.starttls.enable=true

# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port = 465
#spring.mail.properties.mail.smtp.socketFactory.class = javax.net.ssl.SSLSocketFactory
#endregion [Email]
#====================================================================#
#====================================================================#

#billGenerationCron=1/10 * * * * ?

#dailyCronJob=0 * * * * ?
dailyCronJob=40000
dailyCronJobIfFailed=20000

#weeklyCronJob=0 * * * * ?
weeklyCronJob=40000
weeklyCronJobIfFailed=20000


#monthlyCronJob=0 * * * * ?
monthlyCronJob=40000
monthlyCronJobIfFailed=20000


pdfGenerationCron=1/2 * * * * ?
dailyCommunicationCron=1/10 * * * * ?

dataArchiveCron=400

dummyTaskCronJob=40000
dummyTaskCronJobIfFailed=20000
#dataArchiveCron=1/10 * * * * ?

